# This configuration file contains some defaults that should be modified to
# suit your environment.

[librarian]
# WSGI server to use (use bjoern on *nix systems and gevent or cherrypy on
# Windows for best results)
server = gevent

# Port on which to listen
port = 80

# Address to bind to
bind = 0.0.0.0

# IP address range assigned by DHCP to clients
ap_client_ip_range =
    10.0.0.2
    10.0.0.254

# Root url of librarian
root_url = http://librarian.outernet

# Whether to enable debug mode and reloader
debug = no

# Whether extra logging will be output to STDOUT (slows the server down)
log = no

# Whether server should automatically reload on code update
reloader = no

# Location of the lock file
lockfile = /var/run/librarian.lock

# Chosen backend
backend = embedded.archive.EmbeddedArchive

[platform]

# Platform name, such as pillar, web, etc.
name = ORxPi

# Location of the file containing the platform version number
version_file = /etc/version

[logging]
# This section deals with logging section. Most of the settings are related to
# Python's logging module configuration. You may find documentation about
# relevant options here:
# https://docs.python.org/2/library/logging.config.html

# Log format
format = [%(asctime)s] %(levelname)-8s %(message)s

# Date and time formatting
date_format = %Y-%m-%d %H:%M:%S (%z)

# Maximum size of the log file
size = 10MB

# Number of backups to keep
backups = 2

# Output
output = /var/log/librarian.log

# Syslog path
syslog = /var/log/messages

[setup]
# Store setup data in this file
file = /opt/orx/librarian.json

[database]
# Names of all databases
names =
    main
    sessions

# Path to database directory
path = /mnt/data/db

[content]
# Path for temporary content storage
spooldir = /mnt/data/downloads/content

# Path for file downloads
filedir = /mnt/data/downloads/files

# Path for the apps directory
appdir = /mnt/data/downloads/files/apps

# Path to a directory where zipballs that are being extracted are symlinked
unpackdir = /mnt/data/library/.unpack

# Path to content directory (where archive zipballs are stored)
contentdir = /mnt/data/library

# Path to cover images
covers = /mnt/data/library/.covers

# Extension of the signed content
extension = sig

# Extension of decrypted content
output_ext = zip

# Maximum days to keep undecrypted files
#
# If the key is updated upstream, we need to allow some time for the receiver
# to receive the updated public key. Meanwhile, we leave any undecrypted
# content on storage. This setting should be adjusted according to the volume
# of content that comes down the dish, and software update dynamics.
keep = 14

# Name of the file that contains content metadata
metadata = info.json

[session]
# Name of the session cookie
cookie_name = session

# Session lifetime in seconds (default value is 1209600, two weeks)
lifetime = 1209600

[csrf]
# CSRF token cookie name
token_name = _csrf_token

# CSRF token cookie path
path = /

# CSRF token cookie max-age in seconds
expires = 600

[cache]
# Unique backend identifier, possible values are: "in-memory", "memcached"
backend =

# Default timeout value for all cached content for which there is no explicit
# timeout value specified
timeout =

# List of memcached server addresses, e.g.:
# servers =
#     127.0.0.1:11211
servers =

[mako]
# Path where to put generated modules from mako templates (improves performance drastically)
module_directory = /var/run/mako

[storage]
# Minimum space needed on storage at all times. Values can be specified without
# a suffix, in which case it is treated as bytes, or with B, KB, MB, and GB
# suffixes (case-insensitive), for bytes, kilobytes, megabytes, and gigabytes,
# respectively.
minfree = 0.5GB

[plugins]

# Show diskspace stats and offer interfaces for cleanup
diskspace = yes

# Show license
license = yes

# Show Librarian logs
logs = yes

# Show link to TVHeadend
tvheadend = no

# Control tuner using ONDD (disable TVHeadend when enabling this)
ondd = yes

# Backup and rebuild content database
dbmanage = yes

ssid = yes

# Show a list of available network interfaces
netinterfaces = yes

[ondd]

# Location of the ONDD socket
socket = /var/run/ondd.ctrl

[dbmanage]

# Location where database backups are stored, relative to filedir
backups = database_backups

[dashboard]

# Order in which plugins should be rendered
plugins =
    diskspace
    ondd
    dbmanage
    netinterfaces
    ssid
    logs
    license

